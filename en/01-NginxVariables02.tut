= Nginx Variables (02) =

== Variable Lifetime & Internal Redirection ==

We already know that Nginx variables are bound to each request handled by
Nginx, for this reason they have exactly the same lifetime as the corresponding
request.

There is another common misunderstanding here though: some newcomers tend to
assume
that the lifetime of Nginx variables is bound to the C<location> configuration
block. Let's consider the following counterexample:

    :nginx
    server {
        listen 8080;

        location /foo {
            set $a hello;
            echo_exec /bar;
        }

        location /bar {
            echo "a = [$a]";
        }
    }

Here in C<location /foo> we use the L<ngx_echo/echo_exec> directive (provided
by the 3rd-party module L<ngx_echo>) to initiate an "internal redirection" to
C<location /bar>. The "internal redirection" is an operation that makes Nginx
jump
from one C<location> to another while processing a request. This "jumping"
happens
completely within the server itself. This is different from those "external
redirections"
based on the HTTP C<301> and C<302> responses because the latter is
collaborated externally, by the HTTP clients. Also, in case of "external
redirections", the
end user could usually observe the change of the URL in her web browser's
address bar while this is not the case for internal ones. "Internal
redirections"
are very similar to the C<exec> command in
Bourne Shell; it is a "one way trip" and never returns. Another
similar example is the C<goto> statement in the C language.

Being an "internal redirection", the request after the redirection
remains the original one. It is just the current C<location> that is changed,
so we are still using the original copy of the Nginx variable containers. Back
to our example, the whole process looks like this: Nginx first assigns to the
C<$a> variable the string value C<hello> via the L<ngx_rewrite/set> directive
in C<location /foo>, and then it issues an internal redirection via the
L<ngx_echo/echo_exec> directive, thus leaving C<location /foo> and entering
C<location /bar>, and finally it
outputs the value of C<$a>. Because the value container of C<$a> remains
untouched, we can expect the response output to be C<hello>. The test result
confirms this:

    :bash
    $ curl localhost:8080/foo
    a = [hello]

But when accessing C</bar> directly from the client side, we will get an empty
value for the C<$a> variable, since this variable relies on C<location /foo> to
get initialized.

It can be observed that during a request's lifetime, the copy
of Nginx variable containers does not change at all even when Nginx goes across
different C<location> configuration blocks. Here we also encounter the concept
of
"internal redirections" for the first time and it's worth mentioning that the
L<ngx_rewrite/rewrite> directive of the L<ngx_rewrite> module can also be used
to initiate "internal redirections". For instance, we can rewrite the example
above with the L<ngx_rewrite/rewrite> directive as follows:

    :nginx
    server {
        listen 8080;

        location /foo {
            set $a hello;
            rewrite ^ /bar;
        }

        location /bar {
            echo "a = [$a]";
        }
    }

It's functionally equivalent to L<ngx_echo/echo_exec>. We will discuss the
L<ngx_rewrite/rewrite> directive in more depth in later chapters, like
initiating "external redirections" like C<301> and C<302>.

To conclude, the lifetime of Nginx variable containers is indeed bound to the
request being processed, and is irrelevant to C<location>.

== Nginx Built-in Variables ==

The Nginx variables we have seen so far are all (implicitly) created by
directives like L<ngx_rewite/set>. We usually call such variables "user-defined
variables", or simply "user variables". There is also another kind of Nginx
variables that are I<pre-defined> by either the Nginx core or Nginx modules.
Let's call this kind of variables "built-in variables".

=== $uri & $request_uri ===

One common use of Nginx built-in variables is to retrieve various types of
information about the current request or response. For instance, the built-in
variable L<ngx_core/$uri> provided by L<ngx_http_core> is used to fetch the
(decoded) URI of the current request, excluding any query string arguments.
Another example is the L<ngx_core/$request_uri> variable provided by the same
module, which is used to fetch the raw, non-decoded form of the URI, including
any query string. Let's look at the following example.

    :nginx
    location /test {
        echo "uri = $uri";
        echo "request_uri = $request_uri";
    }

We omit the C<server> configuration block here for brevity. Just as all those
samples above, we still listen to the C<8080> local port. In this example, we
output both the L<ngx_core/$uri> and L<ngx_core/$request_uri> into the response
body. Below is the result of testing this C</test> interface with different
requests:

    :bash
    $ curl 'http://localhost:8080/test'
    uri = /test
    request_uri = /test

    $ curl 'http://localhost:8080/test?a=3&b=4'
    uri = /test
    request_uri = /test?a=3&b=4

    $ curl 'http://localhost:8080/test/hello%20world?a=3&b=4'
    uri = /test/hello world
    request_uri = /test/hello%20world?a=3&b=4

=== Variables with Infinite Names ===

There is another very common built-in variable that does not have a fixed
variable name. Instead, It has I<infinite> variations. That is, all those
variables whose names have the prefix C<arg_>, like C<$arg_foo> and
C<$arg_bar>. Let's just call it the L<$arg_XXX> "variable group". For example,
the C<$arg_name> variable is evaluated to the value of the C<name> URI argument
for the current request. Also, the URI argument's value obtained here is not
decoded yet, potentially containing the C<%XX> sequences. Let's check out a
complete example:

    :nginx
    location /test {
        echo "name: $arg_name";
        echo "class: $arg_class";
    }

Then we test this interface with various different URI argument
combinations:

    :bash
    $ curl 'http://localhost:8080/test'
    name:
    class:

    $ curl 'http://localhost:8080/test?name=Tom&class=3'
    name: Tom
    class: 3

    $ curl 'http://localhost:8080/test?name=hello%20world&class=9'
    name: hello%20world
    class: 9

In fact, C<$arg_name> does not only match the C<name> argument name, but also
C<NAME> or even C<Name>. That is, the letter case does not matter here:

    $ curl 'http://localhost:8080/test?NAME=Marry'
    name: Marry
    class:

    $ curl 'http://localhost:8080/test?Name=Jimmy'
    name: Jimmy
    class:

Behind the scene, Nginx just converts the URI argument names into the
pure lower-case form before matching against the name specified by
L<$arg_XXX>.

If you want to decode the special sequences like C<%20> in the URI argument
values, then you could use the L<ngx_set_misc/set_unescape_uri> directive
provided by the 3rd-party module L<ngx_set_misc>.

    :nginx
    location /test {
        set_unescape_uri $name $arg_name;
        set_unescape_uri $class $arg_class;

        echo "name: $name";
        echo "class: $class";
    }

Let's check out the actual effect:

    :bash
    $ curl 'http://localhost:8080/test?name=hello%20world&class=9'
    name: hello world
    class: 9

The space has indeed been decoded!

Another thing that we can observe from this example is that the
L<ngx_set_misc/set_unescape_uri> directive can also implicitly create Nginx
user-defined variables, just like the L<ngx_rewrite/set> directive. We will
discuss the
L<ngx_set_misc> module in more detail in future chapters.

This type of variables like L<$arg_XXX> possesses infinite number of possible
names, so they do not correspond to any value containers.
Furthermore, such variables are handled in a very specific way within the Nginx
core. It
is thus not possible for 3rd-party modules to introduce such magical built-in
variables of their own.

The Nginx core offers a lot of such built-in variables in addition to
L<$arg_XXX>, like the L<$cookie_XXX> variable group for fetching HTTP cookie
values, the L<$http_XXX> variable group for fetching request headers, as well
as the L<$sent_http_XXX> variable group for retrieving response headers. We
will not go into the details for each of them here. Interested readers can
refer to the official documentation for the L<ngx_http_core> module.

=== Read-only Built-in Variables ===

All the user-defined variables are writable. Actually the way that we declare
or create such variables so far is to use a configure directive, like
L<ngx_rewrite/set>, that performs value assignment at request time. But it is
I<not> necessarily the case for built-in variables.

Most of the built-in variables are effectively I<read-only>, like the
L<ngx_core/$uri> and L<ngx_core/$request_uri> variables that we just introduced
earlier. Assignments to such read-only variables must always be avoided.
Otherwise it will lead to unexpected consequences, for example,

    :nginx
    ? location /bad {
    ?     set $uri /blah;
    ?     echo $uri;
    ? }

This problematic configuration just triggers a confusing error message when
Nginx is started:

    [emerg] the duplicate "uri" variable in ...

Attempts of writing to some other read-only built-in variables like L<$arg_XXX>
will just lead to server crashes in some particular Nginx versions.

